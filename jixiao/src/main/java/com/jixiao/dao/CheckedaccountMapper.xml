<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jixiao.dao.CheckedaccountMapper" >
  <resultMap id="BaseResultMap" type="com.jixiao.entity.Checkedaccount" >
    <id column="CHECKEDID" property="checkedid" jdbcType="INTEGER" />
    <result column="ACCOUNTID" property="accountid" jdbcType="INTEGER" />
    <result column="DOCID" property="docid" jdbcType="INTEGER" />
    <result column="CHECKEDACCOUNTID" property="checkedaccountid" jdbcType="INTEGER" />
    <result column="SXSZVALUE" property="sxszvalue" jdbcType="INTEGER" />
    <result column="LJZLVALUE" property="ljzlvalue" jdbcType="INTEGER" />
    <result column="GZZFVALUE" property="gzzfvalue" jdbcType="INTEGER" />
    <result column="JCNLVALUE" property="jcnlvalue" jdbcType="INTEGER" />
    <result column="ZZXTNLVALUE" property="zzxtnlvalue" jdbcType="INTEGER" />
    <result column="CXNLVALUE" property="cxnlvalue" jdbcType="INTEGER" />
    <result column="LDNLVALUE" property="ldnlvalue" jdbcType="INTEGER" />
    <result column="ZRXVALUE" property="zrxvalue" jdbcType="INTEGER" />
    <result column="FWYSVALUE" property="fwysvalue" jdbcType="INTEGER" />
    <result column="MBDCVALUE" property="mbdcvalue" jdbcType="INTEGER" />
    <result column="GLXLVALUE" property="glxlvalue" jdbcType="INTEGER" />
    <result column="XSKFVALUE" property="xskfvalue" jdbcType="INTEGER" />
    <result column="STATE" property="state" jdbcType="INTEGER" />
    <result column="CHECKTIME" property="checktime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    CHECKEDID, ACCOUNTID, DOCID, CHECKEDACCOUNTID, SXSZVALUE, LJZLVALUE, GZZFVALUE, JCNLVALUE, 
    ZZXTNLVALUE, CXNLVALUE, LDNLVALUE, ZRXVALUE, FWYSVALUE, MBDCVALUE, GLXLVALUE, XSKFVALUE, 
    STATE, CHECKTIME
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jixiao.entity.CheckedaccountExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from checkedaccount
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from checkedaccount
    where CHECKEDID = #{checkedid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from checkedaccount
    where CHECKEDID = #{checkedid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jixiao.entity.CheckedaccountExample" >
    delete from checkedaccount
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jixiao.entity.Checkedaccount" >
    insert into checkedaccount (CHECKEDID, ACCOUNTID, DOCID, 
      CHECKEDACCOUNTID, SXSZVALUE, LJZLVALUE, 
      GZZFVALUE, JCNLVALUE, ZZXTNLVALUE, 
      CXNLVALUE, LDNLVALUE, ZRXVALUE, 
      FWYSVALUE, MBDCVALUE, GLXLVALUE, 
      XSKFVALUE, STATE, CHECKTIME
      )
    values (#{checkedid,jdbcType=INTEGER}, #{accountid,jdbcType=INTEGER}, #{docid,jdbcType=INTEGER}, 
      #{checkedaccountid,jdbcType=INTEGER}, #{sxszvalue,jdbcType=INTEGER}, #{ljzlvalue,jdbcType=INTEGER}, 
      #{gzzfvalue,jdbcType=INTEGER}, #{jcnlvalue,jdbcType=INTEGER}, #{zzxtnlvalue,jdbcType=INTEGER}, 
      #{cxnlvalue,jdbcType=INTEGER}, #{ldnlvalue,jdbcType=INTEGER}, #{zrxvalue,jdbcType=INTEGER}, 
      #{fwysvalue,jdbcType=INTEGER}, #{mbdcvalue,jdbcType=INTEGER}, #{glxlvalue,jdbcType=INTEGER}, 
      #{xskfvalue,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}, #{checktime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jixiao.entity.Checkedaccount" >
    insert into checkedaccount
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="checkedid != null" >
        CHECKEDID,
      </if>
      <if test="accountid != null" >
        ACCOUNTID,
      </if>
      <if test="docid != null" >
        DOCID,
      </if>
      <if test="checkedaccountid != null" >
        CHECKEDACCOUNTID,
      </if>
      <if test="sxszvalue != null" >
        SXSZVALUE,
      </if>
      <if test="ljzlvalue != null" >
        LJZLVALUE,
      </if>
      <if test="gzzfvalue != null" >
        GZZFVALUE,
      </if>
      <if test="jcnlvalue != null" >
        JCNLVALUE,
      </if>
      <if test="zzxtnlvalue != null" >
        ZZXTNLVALUE,
      </if>
      <if test="cxnlvalue != null" >
        CXNLVALUE,
      </if>
      <if test="ldnlvalue != null" >
        LDNLVALUE,
      </if>
      <if test="zrxvalue != null" >
        ZRXVALUE,
      </if>
      <if test="fwysvalue != null" >
        FWYSVALUE,
      </if>
      <if test="mbdcvalue != null" >
        MBDCVALUE,
      </if>
      <if test="glxlvalue != null" >
        GLXLVALUE,
      </if>
      <if test="xskfvalue != null" >
        XSKFVALUE,
      </if>
      <if test="state != null" >
        STATE,
      </if>
      <if test="checktime != null" >
        CHECKTIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="checkedid != null" >
        #{checkedid,jdbcType=INTEGER},
      </if>
      <if test="accountid != null" >
        #{accountid,jdbcType=INTEGER},
      </if>
      <if test="docid != null" >
        #{docid,jdbcType=INTEGER},
      </if>
      <if test="checkedaccountid != null" >
        #{checkedaccountid,jdbcType=INTEGER},
      </if>
      <if test="sxszvalue != null" >
        #{sxszvalue,jdbcType=INTEGER},
      </if>
      <if test="ljzlvalue != null" >
        #{ljzlvalue,jdbcType=INTEGER},
      </if>
      <if test="gzzfvalue != null" >
        #{gzzfvalue,jdbcType=INTEGER},
      </if>
      <if test="jcnlvalue != null" >
        #{jcnlvalue,jdbcType=INTEGER},
      </if>
      <if test="zzxtnlvalue != null" >
        #{zzxtnlvalue,jdbcType=INTEGER},
      </if>
      <if test="cxnlvalue != null" >
        #{cxnlvalue,jdbcType=INTEGER},
      </if>
      <if test="ldnlvalue != null" >
        #{ldnlvalue,jdbcType=INTEGER},
      </if>
      <if test="zrxvalue != null" >
        #{zrxvalue,jdbcType=INTEGER},
      </if>
      <if test="fwysvalue != null" >
        #{fwysvalue,jdbcType=INTEGER},
      </if>
      <if test="mbdcvalue != null" >
        #{mbdcvalue,jdbcType=INTEGER},
      </if>
      <if test="glxlvalue != null" >
        #{glxlvalue,jdbcType=INTEGER},
      </if>
      <if test="xskfvalue != null" >
        #{xskfvalue,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="checktime != null" >
        #{checktime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jixiao.entity.CheckedaccountExample" resultType="java.lang.Integer" >
    select count(*) from checkedaccount
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update checkedaccount
    <set >
      <if test="record.checkedid != null" >
        CHECKEDID = #{record.checkedid,jdbcType=INTEGER},
      </if>
      <if test="record.accountid != null" >
        ACCOUNTID = #{record.accountid,jdbcType=INTEGER},
      </if>
      <if test="record.docid != null" >
        DOCID = #{record.docid,jdbcType=INTEGER},
      </if>
      <if test="record.checkedaccountid != null" >
        CHECKEDACCOUNTID = #{record.checkedaccountid,jdbcType=INTEGER},
      </if>
      <if test="record.sxszvalue != null" >
        SXSZVALUE = #{record.sxszvalue,jdbcType=INTEGER},
      </if>
      <if test="record.ljzlvalue != null" >
        LJZLVALUE = #{record.ljzlvalue,jdbcType=INTEGER},
      </if>
      <if test="record.gzzfvalue != null" >
        GZZFVALUE = #{record.gzzfvalue,jdbcType=INTEGER},
      </if>
      <if test="record.jcnlvalue != null" >
        JCNLVALUE = #{record.jcnlvalue,jdbcType=INTEGER},
      </if>
      <if test="record.zzxtnlvalue != null" >
        ZZXTNLVALUE = #{record.zzxtnlvalue,jdbcType=INTEGER},
      </if>
      <if test="record.cxnlvalue != null" >
        CXNLVALUE = #{record.cxnlvalue,jdbcType=INTEGER},
      </if>
      <if test="record.ldnlvalue != null" >
        LDNLVALUE = #{record.ldnlvalue,jdbcType=INTEGER},
      </if>
      <if test="record.zrxvalue != null" >
        ZRXVALUE = #{record.zrxvalue,jdbcType=INTEGER},
      </if>
      <if test="record.fwysvalue != null" >
        FWYSVALUE = #{record.fwysvalue,jdbcType=INTEGER},
      </if>
      <if test="record.mbdcvalue != null" >
        MBDCVALUE = #{record.mbdcvalue,jdbcType=INTEGER},
      </if>
      <if test="record.glxlvalue != null" >
        GLXLVALUE = #{record.glxlvalue,jdbcType=INTEGER},
      </if>
      <if test="record.xskfvalue != null" >
        XSKFVALUE = #{record.xskfvalue,jdbcType=INTEGER},
      </if>
      <if test="record.state != null" >
        STATE = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.checktime != null" >
        CHECKTIME = #{record.checktime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update checkedaccount
    set CHECKEDID = #{record.checkedid,jdbcType=INTEGER},
      ACCOUNTID = #{record.accountid,jdbcType=INTEGER},
      DOCID = #{record.docid,jdbcType=INTEGER},
      CHECKEDACCOUNTID = #{record.checkedaccountid,jdbcType=INTEGER},
      SXSZVALUE = #{record.sxszvalue,jdbcType=INTEGER},
      LJZLVALUE = #{record.ljzlvalue,jdbcType=INTEGER},
      GZZFVALUE = #{record.gzzfvalue,jdbcType=INTEGER},
      JCNLVALUE = #{record.jcnlvalue,jdbcType=INTEGER},
      ZZXTNLVALUE = #{record.zzxtnlvalue,jdbcType=INTEGER},
      CXNLVALUE = #{record.cxnlvalue,jdbcType=INTEGER},
      LDNLVALUE = #{record.ldnlvalue,jdbcType=INTEGER},
      ZRXVALUE = #{record.zrxvalue,jdbcType=INTEGER},
      FWYSVALUE = #{record.fwysvalue,jdbcType=INTEGER},
      MBDCVALUE = #{record.mbdcvalue,jdbcType=INTEGER},
      GLXLVALUE = #{record.glxlvalue,jdbcType=INTEGER},
      XSKFVALUE = #{record.xskfvalue,jdbcType=INTEGER},
      STATE = #{record.state,jdbcType=INTEGER},
      CHECKTIME = #{record.checktime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jixiao.entity.Checkedaccount" >
    update checkedaccount
    <set >
      <if test="accountid != null" >
        ACCOUNTID = #{accountid,jdbcType=INTEGER},
      </if>
      <if test="docid != null" >
        DOCID = #{docid,jdbcType=INTEGER},
      </if>
      <if test="checkedaccountid != null" >
        CHECKEDACCOUNTID = #{checkedaccountid,jdbcType=INTEGER},
      </if>
      <if test="sxszvalue != null" >
        SXSZVALUE = #{sxszvalue,jdbcType=INTEGER},
      </if>
      <if test="ljzlvalue != null" >
        LJZLVALUE = #{ljzlvalue,jdbcType=INTEGER},
      </if>
      <if test="gzzfvalue != null" >
        GZZFVALUE = #{gzzfvalue,jdbcType=INTEGER},
      </if>
      <if test="jcnlvalue != null" >
        JCNLVALUE = #{jcnlvalue,jdbcType=INTEGER},
      </if>
      <if test="zzxtnlvalue != null" >
        ZZXTNLVALUE = #{zzxtnlvalue,jdbcType=INTEGER},
      </if>
      <if test="cxnlvalue != null" >
        CXNLVALUE = #{cxnlvalue,jdbcType=INTEGER},
      </if>
      <if test="ldnlvalue != null" >
        LDNLVALUE = #{ldnlvalue,jdbcType=INTEGER},
      </if>
      <if test="zrxvalue != null" >
        ZRXVALUE = #{zrxvalue,jdbcType=INTEGER},
      </if>
      <if test="fwysvalue != null" >
        FWYSVALUE = #{fwysvalue,jdbcType=INTEGER},
      </if>
      <if test="mbdcvalue != null" >
        MBDCVALUE = #{mbdcvalue,jdbcType=INTEGER},
      </if>
      <if test="glxlvalue != null" >
        GLXLVALUE = #{glxlvalue,jdbcType=INTEGER},
      </if>
      <if test="xskfvalue != null" >
        XSKFVALUE = #{xskfvalue,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        STATE = #{state,jdbcType=INTEGER},
      </if>
      <if test="checktime != null" >
        CHECKTIME = #{checktime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where CHECKEDID = #{checkedid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jixiao.entity.Checkedaccount" >
    update checkedaccount
    set ACCOUNTID = #{accountid,jdbcType=INTEGER},
      DOCID = #{docid,jdbcType=INTEGER},
      CHECKEDACCOUNTID = #{checkedaccountid,jdbcType=INTEGER},
      SXSZVALUE = #{sxszvalue,jdbcType=INTEGER},
      LJZLVALUE = #{ljzlvalue,jdbcType=INTEGER},
      GZZFVALUE = #{gzzfvalue,jdbcType=INTEGER},
      JCNLVALUE = #{jcnlvalue,jdbcType=INTEGER},
      ZZXTNLVALUE = #{zzxtnlvalue,jdbcType=INTEGER},
      CXNLVALUE = #{cxnlvalue,jdbcType=INTEGER},
      LDNLVALUE = #{ldnlvalue,jdbcType=INTEGER},
      ZRXVALUE = #{zrxvalue,jdbcType=INTEGER},
      FWYSVALUE = #{fwysvalue,jdbcType=INTEGER},
      MBDCVALUE = #{mbdcvalue,jdbcType=INTEGER},
      GLXLVALUE = #{glxlvalue,jdbcType=INTEGER},
      XSKFVALUE = #{xskfvalue,jdbcType=INTEGER},
      STATE = #{state,jdbcType=INTEGER},
      CHECKTIME = #{checktime,jdbcType=TIMESTAMP}
    where CHECKEDID = #{checkedid,jdbcType=INTEGER}
  </update>
</mapper>